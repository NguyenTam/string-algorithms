#######T-106.5400 String Algorithms P (5-6 cr) Project#######
Type:         Document

Authors:      Nguyen Tam, 69533P
              Rasa Marko, 78726L

Date:         3.5.2014
Place:        Finland

-------------------------ACHIEVEMENTS--------------------------
The original plan was to implement a simulator for Trivial, KMP, BM, RK,
elimination, Shift-And, Shift-Or, BNDM and AC algorithms.

We manage to finish and test thoroughly on Trivial, KMP, BM1 (BM1 means the
algorithm uses first table), Shift-And and Rabin Karp. There are supporting
algorithms that exact algorithms might use: Border Array, Shift-And table,
Boyer Moore Array1 and Witness Array. Witness Array is the only algorithm that
isn't thoroughly tested. Beside exact algorithms and their tables/dictionary,
we managed to implement edit distance.

BM2 (which use second table), BNDM, AC, Shift-Or and Elimination are left out.
Based on git log (see REFERENCE) we spent 24 days doing alone or in group.
Group work takes atleast 3 hours per day and alone varies between 0-3 hours,
mostly of the time we did in group. About seven days was spent on individual
works, so we spent about 3*(24-7) = 54 hours in group work. We checked from
course home page which said workload on project is 20 hours and we felt tired,
so we stopped. So we atleast expect six credits from this course.

------------------------ARCHITECTURE (ROUGHLY)--------------------------
The general code is split into stralg-init.js executed in the beginning and
stralg.js executed at the end of loading the page. Between these two files,
all the algorithm files, which are prefixed with "alg-" are loaded. The
algorithm files describe an algorithm and a function for creating algorithm
object corresponding to that algorithm. The algorithms have specific interface
which they must follow. This interface is shortly described in a comment in
stralg-init.js.

New algorithms can be implemented by adding a javascript file which contains
algorithm following the interface mentioned above and including the javascript
into index.html in the head tag.

Each time user click OK, the system creates an algorithm object (e.g. trivial
algorithm, border-array) based on inputs. Each object knows how to render to
visualize.


----------------------REFERENCE--------------------------------
- git log --date=short | grep Date | uniq 
Date:   2014-04-24
Date:   2014-04-23
Date:   2014-04-03
Date:   2014-03-30
Date:   2014-03-27
Date:   2014-03-26
Date:   2014-03-20
Date:   2014-03-15
Date:   2014-03-14
Date:   2014-03-13
Date:   2014-03-10
Date:   2014-03-06
Date:   2014-03-03
Date:   2014-02-27
Date:   2014-02-24
Date:   2014-02-13
Date:   2014-02-12
Date:   2014-02-10
Date:   2014-02-07
Date:   2014-02-06
Date:   2014-02-05
Date:   2014-02-03
Date:   2014-02-01
Date:   2014-01-30

- git log --date=short | grep Date | uniq | wc
     24      48     456
